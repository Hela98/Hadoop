---

- name: Define postgresql_packages.
  set_fact:
    postgresql_packages: "{{ __postgresql_packages | list }}"
  when: postgresql_packages is not defined

- name: Define postgresql_version.
  set_fact:
    postgresql_version: "{{ __postgresql_version }}"
  when: postgresql_version is not defined

- name: Define postgresql_daemon.
  set_fact:
    postgresql_daemon: "{{ __postgresql_daemon }}"
  when: postgresql_daemon is not defined

- name: Define postgresql_data_dir.
  set_fact:
    postgresql_data_dir: "{{ __postgresql_data_dir }}"
  when: postgresql_data_dir is not defined

- name: Define postgresql_bin_path.
  set_fact:
    postgresql_bin_path: "{{ __postgresql_bin_path }}"
  when: postgresql_bin_path is not defined

- name: Define postgresql_config_path.
  set_fact:
    postgresql_config_path: "{{ __postgresql_config_path }}"
  when: postgresql_config_path is not defined

- name: Define postgresql_unix_socket_directories_mode.
  set_fact:
    postgresql_unix_socket_directories_mode: >-
      {{ __postgresql_unix_socket_directories_mode | default('02775') }}
  when: postgresql_unix_socket_directories_mode is not defined

- name: Ensure PostgreSQL Python libraries are installed.
  apt:
    name: "{{ postgresql_python_library }}"
    state: present

- name: Ensure PostgreSQL packages are installed.
  apt:
    name: "{{ postgresql_packages }}"
    state: present


- name: Force-restart PostgreSQL after new locales are generated.
  service:
    name: "{{ postgresql_daemon }}"
    state: restarted

- name: Set PostgreSQL environment variables.
  template:
    src: postgres.sh.j2
    dest: /etc/profile.d/postgres.sh
    mode: 0644
  notify: restart postgresql

- name: Ensure PostgreSQL data directory exists.
  file:
    path: "{{ postgresql_data_dir }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    state: directory
    mode: 0700

- name: Ensure PostgreSQL is started and enabled on boot.
  service:
    name: "{{ postgresql_daemon }}"
    state: "{{ postgresql_service_state }}"
    enabled: "{{ postgresql_service_enabled }}"

# - name: Ensure PostgreSQL users are present.
#   postgresql_user:
#     name: "{{ item.name }}"
#     password: "{{ item.password | default(omit) }}"
#     login_host: "{{ item.login_host | default('localhost') }}"
#     login_password: "{{ item.login_password | default(omit) }}"
#     login_user: "{{ item.login_user | default(postgresql_user) }}"
#     login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
#     port: "{{ item.port | default(omit) }}"
#   with_items: "{{ postgresql_users }}"
#   become: true
#   become_user: "{{ postgresql_user }}"
#   vars:
#     ansible_ssh_pipelining: true
 
- name: Ensure PostgreSQL databases are present.
  postgresql_db:
    name: "{{ item.name }}"
    lc_collate: "{{ item.lc_collate | default('en_US.UTF-8') }}"
    lc_ctype: "{{ item.lc_ctype | default('en_US.UTF-8') }}"
    encoding: "{{ item.encoding | default('UTF-8') }}"
    template: "{{ item.template | default('template0') }}"
    login_host: "{{ item.login_host | default('localhost') }}"
    login_password: "{{ item.login_password | default(omit) }}"
    login_user: "{{ item.login_user | default(postgresql_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
    owner: "{{ item.owner | default(postgresql_user) }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_databases }}"
  become: true
  become_user: "{{ postgresql_user }}"
  vars:
    ansible_ssh_pipelining: true